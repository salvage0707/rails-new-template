#!/bin/bash

# このバージョンはDockerfileに書いてある内容
ruby_version=3.2.2
node_version=20
default_option="--skip-bundle --database=postgresql"

echo "以下でRailsをインストールします。"
echo "Rubyのバージョン: $ruby_version"
echo "Nodeのバージョン: $node_version"
echo "デフォルトオプション: $default_option"

read -p "他に必要なオプションがあれば入力してください > " other_option

echo "-------------------------------------------"
read -p "この内容で良いですか？ (yes/no): " confirmation
if [ "$confirmation" != "yes" ]; then
  echo "バージョンを変える場合は、Dockerfile.tmpを編集してください。"
  echo "デフォルトオプションを変える場合は、scripts/setup_rails.shを編集してください。"
  echo "終了します。"
  exit 1
fi

echo "-------------------------------------------"
echo "Dockerをビルドしています。"
echo "docker build -t rails-new-template -f Dockerfile.tmp ."
docker build -t rails-new-template -f Dockerfile.tmp .

echo "Railsをインストールしています。"
echo "docker run --rm -v ${PWD}:/app rails-new-template rails new . --force --database=postgresql --skip-bundle $other_option"
docker run --rm -v ${PWD}:/app rails-new-template rails new . --force --database=postgresql --skip-bundle $other_option

echo "-------------------------------------------"
echo "database.ymlを編集しています。"
cat << 'EOF' > config/database.yml
# PostgreSQL. Versions 9.3 and up are supported.
#
# Install the pg driver:
#   gem install pg
# On macOS with Homebrew:
#   gem install pg -- --with-pg-config=/usr/local/bin/pg_config
# On Windows:
#   gem install pg
#       Choose the win32 build.
#       Install PostgreSQL and put its /bin directory on your path.
#
# Configure Using Gemfile
# gem "pg"
#
default: &default
  adapter: postgresql
  encoding: unicode
  # For details on connection pooling, see Rails configuration guide
  # https://guides.rubyonrails.org/configuring.html#database-pooling
  pool: <%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %>
  port: 5432
  username: <%= ENV['DB_USERNAME'] %>
  password: <%= ENV['DB_PASSWORD'] %>
  host: <%= ENV['DB_HOST'] %>

development:
  <<: *default
  database: app_development

  # The specified database role being used to connect to PostgreSQL.
  # To create additional roles in PostgreSQL see `$ createuser --help`.
  # When left blank, PostgreSQL will use the default role. This is
  # the same name as the operating system user running Rails.
  #username: app

  # The password associated with the PostgreSQL role (username).
  #password:

  # Connect on a TCP socket. Omitted by default since the client uses a
  # domain socket that doesn't need configuration. Windows does not have
  # domain sockets, so uncomment these lines.
  #host: localhost

  # The TCP port the server listens on. Defaults to 5432.
  # If your server runs on a different port number, change accordingly.
  #port: 5432

  # Schema search path. The server defaults to $user,public
  #schema_search_path: myapp,sharedapp,public

  # Minimum log levels, in increasing order:
  #   debug5, debug4, debug3, debug2, debug1,
  #   log, notice, warning, error, fatal, and panic
  # Defaults to warning.
  #min_messages: notice

# Warning: The database defined as "test" will be erased and
# re-generated from your development database when you run "rake".
# Do not set this db to the same as development or production.
test:
  <<: *default
  database: app_test

# As with config/credentials.yml, you never want to store sensitive information,
# like your database password, in your source code. If your source code is
# ever seen by anyone, they now have access to your database.
#
# Instead, provide the password or a full connection URL as an environment
# variable when you boot the app. For example:
#
#   DATABASE_URL="postgres://myuser:mypass@localhost/somedatabase"
#
# If the connection URL is provided in the special DATABASE_URL environment
# variable, Rails will automatically merge its configuration values on top of
# the values provided in this file. Alternatively, you can specify a connection
# URL environment variable explicitly:
#
#   production:
#     url: <%= ENV["MY_APP_DATABASE_URL"] %>
#
# Read https://guides.rubyonrails.org/configuring.html#configuring-a-database
# for a full overview on how database connection configuration can be specified.
#
production:
  <<: *default
  database: app_production

EOF
